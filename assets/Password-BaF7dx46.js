import { aP as markRaw, aB as openBlock, aG as createElementBlock, aF as createBaseVNode, ay as defineComponent, aW as computed, aA as resolveComponent, aH as createCommentVNode, aK as Fragment, aJ as renderList, aE as createVNode, aC as createBlock, bx as resolveDynamicComponent, aN as toDisplayString, aZ as renderSlot, aL as mergeProps, az as ref, cK as createSlots, aD as withCtx, aM as createTextVNode, b3 as withDirectives, by as vShow, bm as withKeys, a_ as withModifiers } from "./vendor-F5kC6_Yf.js";
import { _ as _export_sfc } from "./_plugin-vue_export-helper-1tPrXgE0.js";
import { F as FormControl } from "./FormControl-DLjSckCx.js";
import { _ as __unplugin_components_0 } from "./Button-SEBbO4PF.js";
const _hoisted_1$c = {
  class: "lucide lucide-eye",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$a(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$c, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "circle",
      {
        cx: "12",
        cy: "12",
        r: "3"
      },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const LucideEye = markRaw({ name: "lucide-eye", render: render$a });
const _hoisted_1$b = {
  class: "lucide lucide-eye-off",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$9(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$b, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "M14.084 14.158a3 3 0 0 1-4.242-4.242" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m2 2 20 20" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const LucideEyeOff = markRaw({ name: "lucide-eye-off", render: render$9 });
const _hoisted_1$a = {
  class: "lucide lucide-command",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$8(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$a, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const LucideCommand = markRaw({ name: "lucide-command", render: render$8 });
const _hoisted_1$9 = {
  class: "lucide lucide-arrow-big-up",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$7(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$9, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M9 13a1 1 0 0 0-1-1H5.061a1 1 0 0 1-.75-1.811l6.836-6.835a1.207 1.207 0 0 1 1.707 0l6.835 6.835a1 1 0 0 1-.75 1.811H16a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const LucideShift = markRaw({ name: "lucide-arrow-big-up", render: render$7 });
const _hoisted_1$8 = {
  class: "lucide lucide-option",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$6(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$8, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M3 3h6l6 18h6" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "M14 3h7" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const LucideAlt = markRaw({ name: "lucide-option", render: render$6 });
const _hoisted_1$7 = {
  class: "lucide lucide-arrow-up",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$5(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$7, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "m5 12 7-7 7 7" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "M12 19V5" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconArrowUp = markRaw({ name: "lucide-arrow-up", render: render$5 });
const _hoisted_1$6 = {
  class: "lucide lucide-arrow-down",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$4(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$6, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M12 5v14" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m19 12-7 7-7-7" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconArrowDown = markRaw({ name: "lucide-arrow-down", render: render$4 });
const _hoisted_1$5 = {
  class: "lucide lucide-arrow-left",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$3(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$5, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "m12 19-7-7 7-7" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "M19 12H5" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconArrowLeft = markRaw({ name: "lucide-arrow-left", render: render$3 });
const _hoisted_1$4 = {
  class: "lucide lucide-arrow-right",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$2(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$4, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M5 12h14" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m12 5 7 7-7 7" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconArrowRight = markRaw({ name: "lucide-arrow-right", render: render$2 });
const _hoisted_1$3 = {
  class: "lucide lucide-corner-down-left",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render$1(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$3, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M20 4v7a4 4 0 0 1-4 4H4" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m9 10-5 5 5 5" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconEnter = markRaw({ name: "lucide-corner-down-left", render: render$1 });
const _hoisted_1$2 = {
  class: "lucide lucide-delete",
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": "1.5",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function render(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$2, _cache[0] || (_cache[0] = [
    createBaseVNode(
      "path",
      { d: "M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m12 9 6 6" },
      null,
      -1
      /* HOISTED */
    ),
    createBaseVNode(
      "path",
      { d: "m18 9-6 6" },
      null,
      -1
      /* HOISTED */
    )
  ]));
}
const IconBackspace = markRaw({ name: "lucide-delete", render });
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{ name: "KeyboardShortcut" },
  __name: "KeyboardShortcut",
  props: {
    meta: { type: Boolean, required: false },
    ctrl: { type: Boolean, required: false },
    shift: { type: Boolean, required: false },
    alt: { type: Boolean, required: false },
    shortcut: { type: String, required: false },
    bg: { type: Boolean, required: false },
    combo: { type: String, required: false },
    showPlus: { type: Boolean, required: false, default: true },
    altCombos: { type: Array, required: false, default: () => [] },
    useIcons: { type: Boolean, required: false, default: true }
  },
  setup(__props, { expose: __expose }) {
    __expose();
    const isMac = computed(() => {
      var _a;
      if (typeof navigator === "undefined") return false;
      const p = ((_a = navigator.userAgentData) == null ? void 0 : _a.platform) || navigator.platform || "";
      if (/Mac|iPod|iPhone|iPad/i.test(p)) return true;
      return /Mac OS X|Macintosh|iPhone|iPad|iPod/i.test(navigator.userAgent);
    });
    const props = __props;
    const showPlus = computed(() => props.showPlus);
    const rootClasses = computed(
      () => props.bg ? "bg-surface-gray-2 rounded-sm text-ink-gray-5 py-0.5 px-1" : "text-ink-gray-4"
    );
    function parseCombo(raw) {
      if (!raw) return [];
      const aliasMap = {
        mod: isMac.value ? "cmd" : "ctrl",
        command: "cmd",
        cmd: "cmd",
        "⌘": "cmd",
        control: "ctrl",
        ctrl: "ctrl",
        option: "alt",
        opt: "alt",
        alt: "alt",
        "⌥": "alt",
        shift: "shift",
        "⇧": "shift",
        meta: isMac.value ? "cmd" : "win",
        win: "win",
        windows: "win"
      };
      const keyMap = {
        esc: "Esc",
        escape: "Esc",
        enter: "↵",
        return: "↵",
        space: "Space",
        " ": "Space",
        tab: "Tab",
        backspace: "⌫",
        delete: "⌦",
        del: "⌦",
        up: "↑",
        arrowup: "↑",
        down: "↓",
        arrowdown: "↓",
        left: "←",
        arrowleft: "←",
        right: "→",
        arrowright: "→",
        pageup: "PgUp",
        pagedown: "PgDn",
        home: "Home",
        end: "End"
      };
      const result = raw.split("+").map((p) => p.trim()).filter(Boolean).map((original) => {
        const lower = original.toLowerCase();
        const type = aliasMap[lower] || "key";
        let display = original;
        if (type !== "key") {
          if (type === "cmd") display = "⌘";
          else if (type === "shift") display = "⇧";
          else if (type === "alt") display = "⌥";
          else if (type === "ctrl") display = "Ctrl";
          else if (type === "win") display = "Win";
        } else {
          if (keyMap[lower]) display = keyMap[lower];
          else if (/^[a-z]$/.test(lower)) display = lower.toUpperCase();
          else if (/^f\d{1,2}$/i.test(original)) display = original.toUpperCase();
        }
        return { raw: original, type, display };
      });
      return dedupeDeleteKeys(result);
    }
    function dedupeDeleteKeys(parts) {
      const hasBack = parts.some((r) => r.display === "⌫");
      const hasFDel = parts.some((r) => r.display === "⌦");
      if (hasBack && hasFDel) {
        if (isMac.value) return parts.filter((r) => r.display !== "⌦");
        return parts.filter((r) => r.display !== "⌦");
      }
      return parts;
    }
    const parsedParts = computed(() => parseCombo(props.combo));
    const ariaLabel = computed(() => {
      if (!parsedParts.value.length) return void 0;
      const wordMap = {
        "⌘": "Command",
        "⇧": "Shift",
        "⌥": "Option",
        Ctrl: "Control",
        Win: "Windows",
        "↵": "Enter",
        "⌫": "Backspace",
        "⌦": "Delete",
        "↑": "Up Arrow",
        "↓": "Down Arrow",
        "←": "Left Arrow",
        "→": "Right Arrow"
      };
      const seq = parsedParts.value.map((p) => wordMap[p.display] || p.display).join(" + ");
      return "Shortcut " + seq;
    });
    const keyIconMap = {
      "↑": IconArrowUp,
      "↓": IconArrowDown,
      "←": IconArrowLeft,
      "→": IconArrowRight,
      "↵": IconEnter,
      "⌫": IconBackspace
    };
    function iconFor(part) {
      if (!props.useIcons) return null;
      if (["cmd", "shift", "alt"].includes(part.type)) return null;
      return keyIconMap[part.display] || null;
    }
    const __returned__ = { isMac, props, showPlus, rootClasses, parseCombo, dedupeDeleteKeys, parsedParts, ariaLabel, keyIconMap, iconFor, get LucideCommand() {
      return LucideCommand;
    }, get LucideShift() {
      return LucideShift;
    }, get LucideAlt() {
      return LucideAlt;
    } };
    Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
    return __returned__;
  }
});
const _hoisted_1$1 = ["aria-label"];
const _hoisted_2$1 = { key: 0 };
const _hoisted_3 = { key: 1 };
const _hoisted_4 = { key: 2 };
const _hoisted_5 = {
  key: 1,
  class: "font-mono leading-none tracking-wide uppercase text-[10px]"
};
const _hoisted_6 = {
  key: 4,
  class: "font-mono text-[10px] leading-none opacity-60",
  "aria-hidden": "true"
};
const _hoisted_7 = { key: 0 };
const _hoisted_8 = {
  key: 1,
  class: "font-mono text-[10px] leading-none"
};
const _hoisted_9 = { key: 1 };
const _hoisted_10 = { key: 2 };
const _hoisted_11 = {
  key: 0,
  class: "inline-flex items-center gap-1 ml-1"
};
const _hoisted_12 = ["aria-label"];
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_KeyboardShortcut = resolveComponent("KeyboardShortcut", true);
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createBaseVNode("div", mergeProps({
        class: ["inline-flex items-center gap-0.5 text-sm", $setup.rootClasses],
        "aria-label": $setup.ariaLabel,
        role: "note"
      }, _ctx.$attrs), [
        createCommentVNode(" Primary combo rendering "),
        $setup.parsedParts.length ? (openBlock(true), createElementBlock(
          Fragment,
          { key: 0 },
          renderList($setup.parsedParts, (part, idx) => {
            return openBlock(), createElementBlock(
              Fragment,
              {
                key: idx + "-" + part.raw
              },
              [
                createCommentVNode(" Explicit modifier icons "),
                part.type === "cmd" ? (openBlock(), createElementBlock("span", _hoisted_2$1, [
                  createVNode($setup["LucideCommand"], {
                    class: "w-3 h-3",
                    "aria-label": "Command"
                  })
                ])) : part.type === "shift" ? (openBlock(), createElementBlock("span", _hoisted_3, [
                  createVNode($setup["LucideShift"], {
                    class: "w-3 h-3",
                    "aria-label": "Shift"
                  })
                ])) : part.type === "alt" ? (openBlock(), createElementBlock("span", _hoisted_4, [
                  createVNode($setup["LucideAlt"], {
                    class: "w-3 h-3",
                    "aria-label": "Option"
                  })
                ])) : (openBlock(), createElementBlock(
                  Fragment,
                  { key: 3 },
                  [
                    createCommentVNode(" Non-modifier key "),
                    createBaseVNode("span", null, [
                      $setup.iconFor(part) ? (openBlock(), createBlock(resolveDynamicComponent($setup.iconFor(part)), {
                        key: 0,
                        class: "w-3 h-3",
                        "aria-label": part.display
                      }, null, 8, ["aria-label"])) : (openBlock(), createElementBlock(
                        "span",
                        _hoisted_5,
                        toDisplayString(part.display),
                        1
                        /* TEXT */
                      ))
                    ])
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                )),
                createCommentVNode(" + separator (visually): hidden from screen readers because ariaLabel combines sequence "),
                idx < $setup.parsedParts.length - 1 && $setup.showPlus ? (openBlock(), createElementBlock("span", _hoisted_6, "+")) : createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        )) : (openBlock(), createElementBlock(
          Fragment,
          { key: 1 },
          [
            createCommentVNode(" Backward compatibility path (legacy boolean props + slot) "),
            $props.ctrl || $props.meta ? (openBlock(), createElementBlock("span", _hoisted_7, [
              $setup.isMac ? (openBlock(), createBlock($setup["LucideCommand"], {
                key: 0,
                class: "w-3 h-3",
                "aria-label": "Command"
              })) : (openBlock(), createElementBlock("span", _hoisted_8, "Ctrl"))
            ])) : createCommentVNode("v-if", true),
            $props.shift ? (openBlock(), createElementBlock("span", _hoisted_9, [
              createVNode($setup["LucideShift"], {
                class: "w-3 h-3",
                "aria-label": "Shift"
              })
            ])) : createCommentVNode("v-if", true),
            $props.alt ? (openBlock(), createElementBlock("span", _hoisted_10, [
              createVNode($setup["LucideAlt"], {
                class: "w-3 h-3",
                "aria-label": "Option"
              })
            ])) : createCommentVNode("v-if", true),
            renderSlot(_ctx.$slots, "default")
          ],
          64
          /* STABLE_FRAGMENT */
        ))
      ], 16, _hoisted_1$1),
      createCommentVNode(" Alternative combos (equivalents) rendered alongside "),
      $props.altCombos && $props.altCombos.length ? (openBlock(), createElementBlock("span", _hoisted_11, [
        (openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList($props.altCombos, (alt, i) => {
            return openBlock(), createElementBlock("div", {
              key: "alt-" + i + alt,
              class: "inline-flex items-center gap-0.5 text-sm bg-surface-gray-2 rounded-sm text-ink-gray-5 py-0.5 px-1",
              "aria-label": "Alternative shortcut " + alt
            }, [
              createCommentVNode(" Pass primitive boolean, not Ref "),
              createVNode(_component_KeyboardShortcut, {
                combo: alt,
                "show-plus": $setup.showPlus
              }, null, 8, ["combo", "show-plus"])
            ], 8, _hoisted_12);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : createCommentVNode("v-if", true)
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
_sfc_main$1.__file = "src/components/KeyboardShortcut.vue";
const KeyboardShortcut = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1], ["__file", "/home/runner/work/frappe-ui/frappe-ui/src/components/KeyboardShortcut.vue"]]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Password",
  props: {
    modelValue: { type: [String, null], required: false },
    value: { type: [String, null], required: false }
  },
  setup(__props, { expose: __expose }) {
    __expose();
    const props = __props;
    const show = ref(false);
    const showEye = computed(() => {
      let v = props.modelValue || props.value;
      return !(v == null ? void 0 : v.includes("*"));
    });
    const __returned__ = { props, show, showEye, get LucideEye() {
      return LucideEye;
    }, get LucideEyeOff() {
      return LucideEyeOff;
    }, KeyboardShortcut, FormControl, Tooltip: __unplugin_components_0 };
    Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
    return __returned__;
  }
});
const _hoisted_1 = { class: "rounded bg-surface-gray-7 py-1.5 px-2 text-xs text-ink-white shadow-xl" };
const _hoisted_2 = { class: "flex items-center gap-1" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock($setup["FormControl"], mergeProps({
    type: $setup.show ? "text" : "password",
    value: $props.modelValue || $props.value
  }, _ctx.$attrs, {
    onKeydown: [
      _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => $setup.show = !$setup.show, ["meta", "prevent"]), ["i"])),
      _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => $setup.show = !$setup.show, ["ctrl", "prevent"]), ["i"]))
    ]
  }), createSlots({
    suffix: withCtx(() => [
      createVNode($setup["Tooltip"], null, {
        body: withCtx(() => [
          createBaseVNode("div", _hoisted_1, [
            createBaseVNode("span", _hoisted_2, [
              createTextVNode(
                toDisplayString($setup.show ? "Hide Password" : "Show Password") + " ",
                1
                /* TEXT */
              ),
              createVNode($setup["KeyboardShortcut"], {
                bg: "",
                combo: "Mod+I",
                class: "!bg-surface-gray-5 !text-ink-gray-2 px-1"
              })
            ])
          ])
        ]),
        default: withCtx(() => [
          createBaseVNode("div", null, [
            withDirectives((openBlock(), createBlock(
              resolveDynamicComponent($setup.show ? $setup.LucideEyeOff : $setup.LucideEye),
              {
                class: "h-3 cursor-pointer mr-1",
                onClick: _cache[0] || (_cache[0] = ($event) => $setup.show = !$setup.show)
              },
              null,
              512
              /* NEED_PATCH */
            )), [
              [vShow, $setup.showEye]
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 2
    /* DYNAMIC */
  }, [
    _ctx.$slots.prefix ? {
      name: "prefix",
      fn: withCtx(() => [
        renderSlot(_ctx.$slots, "prefix")
      ]),
      key: "0"
    } : void 0
  ]), 1040, ["type", "value"]);
}
_sfc_main.__file = "src/components/Password/Password.vue";
const Password = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/home/runner/work/frappe-ui/frappe-ui/src/components/Password/Password.vue"]]);
export {
  Password as P
};
